package com.semartinez.projects.choppit.view;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.ViewHolder;
import com.semartinez.projects.choppit.BR;
import com.semartinez.projects.choppit.controller.ui.cookbook.RecipeFragment;
import com.semartinez.projects.choppit.controller.ui.editing.EditingFragment;
import com.semartinez.projects.choppit.databinding.ItemEditStepBinding;
import com.semartinez.projects.choppit.databinding.ItemRecipeStepBinding;
import com.semartinez.projects.choppit.model.entity.Recipe;
import com.semartinez.projects.choppit.model.entity.Step;
import java.util.List;

/**
 * Provides bindings for a list of Steps to be displayed in either the {@link EditingFragment} or
 * {@link RecipeFragment}.
 */
public class StepRecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

  private final Context context;
  private final EditingFragment editingController;
  private final RecipeFragment recipeController;
  private final boolean edit;
  private final List<Step> steps;

  /**
   * Handles Data Binding for a list of Steps passed by the active Fragment while displaying a
   * Recipe.
   *
   * @param context    the Context where the adapter operates
   * @param recipe     is received from the active Fragment.
   * @param uiFragment is the active Fragment when this Adapter is being used.
   */
  public StepRecyclerAdapter(Context context,
      Recipe recipe, Fragment uiFragment) {
    this.context = context;
    this.edit = uiFragment instanceof EditingFragment;
    this.editingController =
        uiFragment instanceof EditingFragment ? (EditingFragment) uiFragment : null;
    this.recipeController =
        uiFragment instanceof RecipeFragment ? (RecipeFragment) uiFragment : null;
    this.steps = recipe.getSteps();
  }

  /**
   * @param parent   where the new ViewHolder will be added.
   * @param viewType is not used in this override.
   * @return a ViewHolder for each item to be displayed based on the active Fragment.
   */
  @NonNull
  @Override
  public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
    LayoutInflater layoutInflater = LayoutInflater.from(context);
    if (edit) {
      ItemEditStepBinding editStepBinding = ItemEditStepBinding
          .inflate(layoutInflater, parent, false);
      Log.d("StepOnCreateViewHolder", "done");
      return new EditStepViewHolder(editStepBinding);
    } else {
      ItemRecipeStepBinding recipeStepBinding = ItemRecipeStepBinding
          .inflate(layoutInflater, parent, false);
      return new RecipeStepViewHolder(recipeStepBinding);
    }
  }

  /**
   * Attaches each Step to a ViewHolder.
   *
   * @param viewHolder generated by {@link #onCreateViewHolder(ViewGroup, int)}
   * @param position   the position of the Step being added.
   */
  @Override
  public void onBindViewHolder(@NonNull ViewHolder viewHolder, int position) {
    Step step = steps.get(position);
    if (edit) {
      ((EditStepViewHolder) viewHolder).bind(step);
    } else {
      ((RecipeStepViewHolder) viewHolder).bind(step);
    }
  }

  /**
   * @return the number of steps.
   */
  @Override
  public int getItemCount() {
    return steps.size();
  }

  /**
   * Allows the user to add a new Step
   */
  public void addStep() {
    Log.d("addStep", "Add Step Button");
    steps.add(new Step());
    notifyItemInserted(steps.size());
  }

  /**
   * Allows the user to delete a single Step.
   *
   * @param position the adapter position of the Step to be deleted.
   */
  public void deleteStep(int position) {
    steps.remove(position);
    notifyDataSetChanged();
  }

  /**
   * The ViewHolder class attaches Step fields to UI components.  EditStepViewHolder presents
   * user-editable Steps.
   */
  public class EditStepViewHolder extends RecyclerView.ViewHolder {

    private final ItemEditStepBinding binding;

    /**
     * The ViewHolder constructor attaches a {@link View} to each binding.
     *
     * @param binding is the connection between the data and the interface.
     */
    public EditStepViewHolder(ItemEditStepBinding binding) {
      super(binding.getRoot());
      this.binding = binding;
    }

    /**
     * This method attaches a specific {@link Step} to a specific entry in the active Fragment and
     * attaches a reference to the EditingFragment to handle user input.
     *
     * @param step the item to be bound
     */
    public void bind(Step step) {
      binding.setVariable(BR.step, step);
      binding.setPosition(getAdapterPosition());
      binding.setUiController(editingController);
      step.setRecipeOrder(getAdapterPosition() + 1);
      binding.executePendingBindings();
    }
  }

  /**
   * The ViewHolder class attaches Ingredient fields to UI components.  RecipeStepViewHolder
   * presents non-editable Steps.
   */
  public class RecipeStepViewHolder extends RecyclerView.ViewHolder {

    private final ItemRecipeStepBinding binding;

    /**
     * The ViewHolder constructor attaches a {@link View} to each binding.
     *
     * @param binding is the connection between the data and the interface.
     */
    public RecipeStepViewHolder(ItemRecipeStepBinding binding) {
      super(binding.getRoot());
      this.binding = binding;
    }

    /**
     * This method attaches a single @link Step} to a specific binding and attaches the active
     * Fragment to handle user input.
     *
     * @param step the item to be bound
     */
    public void bind(Step step) {
      binding.setVariable(BR.step, step);
      binding.setUiController(recipeController);
      binding.executePendingBindings();
    }
  }

}
