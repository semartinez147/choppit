package com.semartinez.projects.choppit.view;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.ViewHolder;
import com.semartinez.projects.choppit.controller.ui.editing.SelectionFragment;
import com.semartinez.projects.choppit.databinding.ItemSelectionListBinding;
import java.util.List;
import org.jetbrains.annotations.NotNull;

/**
 * Provides bindings for a list of Strings extracted from an HTML document to be displayed in the
 * {@link SelectionFragment}.
 */
public class SelectionRecyclerAdapter extends RecyclerView.Adapter<ViewHolder> {

  private final Context context;
  private final List<String> strings;
  private final SelectionFragment selectionFragment;

  /**
   * @param context           the Context where the adapter operates
   * @param strings           are received from the SelectionFragment.
   * @param selectionFragment the active Fragment.
   */
  public SelectionRecyclerAdapter(Context context, List<String> strings,
      SelectionFragment selectionFragment) {
    this.context = context;
    this.strings = strings;
    this.selectionFragment = selectionFragment;
  }

  /**
   * @param parent   where the new ViewHolder will be added.
   * @param viewType is not used in this override.
   * @return a ViewHolder for each item to be displayed based on the active Fragment.
   */
  @NonNull
  @Override
  public ViewHolder onCreateViewHolder(@NonNull @NotNull ViewGroup parent, int viewType) {
    LayoutInflater layoutInflater = LayoutInflater.from(context);
    ItemSelectionListBinding selectionListItemBinding = ItemSelectionListBinding
        .inflate(layoutInflater, parent, false);
    return new SelectionViewHolder(selectionListItemBinding);
  }

  /**
   * Attaches each String to a ViewHolder.
   *
   * @param viewHolder generated by {@link #onCreateViewHolder(ViewGroup, int)}
   * @param position   the position of the String being added.
   */
  @Override
  public void onBindViewHolder(@NonNull @NotNull ViewHolder viewHolder, int position) {
    String string = strings.get(position);
    ((SelectionViewHolder) viewHolder).bind(string, selectionFragment);
  }

  /**
   * @return the number of Strings.
   */
  @Override
  public int getItemCount() {
    return strings.size();
  }

  /**
   * @return the list of Strings.
   */
  public List<String> getStrings() {
    return strings;
  }

  /**
   * The ViewHolder class attaches Strings to UI components.
   */
  static class SelectionViewHolder extends RecyclerView.ViewHolder {

    private final ItemSelectionListBinding binding;

    /**
     * The ViewHolder constructor attaches a {@link View} to each binding.
     *
     * @param binding is the connection between the data and the interface.
     */
    public SelectionViewHolder(ItemSelectionListBinding binding) {
      super(binding.getRoot());
      this.binding = binding;
    }

    /**
     * This method attaches a specific String to a specific entry in the SelectionFragment and
     * attaches a reference to the SelectionFragment to handle user input.
     *
     * @param string            the String to be bound
     * @param selectionFragment is the active Fragment
     */
    public void bind(String string, SelectionFragment selectionFragment) {
      binding.setUiController(selectionFragment);
      binding.setString(string);
      binding.executePendingBindings();
    }
  }
}