package com.semartinez.projects.choppit.view;

import android.content.Context;
import android.view.HapticFeedbackConstants;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.navigation.Navigation;
import androidx.recyclerview.widget.RecyclerView;
import com.semartinez.projects.choppit.controller.ui.cookbook.CookbookFragment;
import com.semartinez.projects.choppit.controller.ui.cookbook.CookbookFragmentDirections;
import com.semartinez.projects.choppit.databinding.ItemCookbookListBinding;
import com.semartinez.projects.choppit.model.entity.Recipe;
import com.semartinez.projects.choppit.service.Constants;
import com.semartinez.projects.choppit.view.CookbookRecyclerAdapter.CookbookViewHolder;
import java.util.List;

/**
 * Provides bindings for individual recipes to be displayed in the {@link CookbookFragment}
 */
public class CookbookRecyclerAdapter extends RecyclerView.Adapter<CookbookViewHolder> {

  private final Context context;
  private final List<Recipe> recipes;
  private final CookbookFragment cookbookFragment;

  /**
   * Handles Data Binding input retrieved from the database and displays the list of {@link
   * Recipe}s
   *
   * @param context          the {@link Context} where the adapter operates.
   * @param recipes          the list of {@link Recipe}s to be displayed
   * @param cookbookFragment the active Fragment
   */
  public CookbookRecyclerAdapter(Context context, List<Recipe> recipes,
      CookbookFragment cookbookFragment) {
    this.context = context;
    this.recipes = recipes;
    this.cookbookFragment = cookbookFragment;
  }

  @SuppressWarnings("unused")
  private void updateRecipes(List<Recipe> newRecipes) {
    recipes.clear();
    recipes.addAll(newRecipes);
    notifyDataSetChanged();
  }

  /**
   * @return a ViewHolder for each item to be displayed
   */
  @NonNull
  @Override
  public CookbookViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
    LayoutInflater layoutInflater = LayoutInflater.from(context);
    ItemCookbookListBinding itemCookbookListBinding = ItemCookbookListBinding
        .inflate(layoutInflater, parent, false);
    return new CookbookViewHolder(itemCookbookListBinding);
  }

  /**
   * Attaches each Recipe to a ViewHolder.
   *
   * @param holder   generated by {@link #onCreateViewHolder(ViewGroup, int)}.
   * @param position the index of the Recipe being added to the ViewHolder.
   */
  @Override
  public void onBindViewHolder(@NonNull CookbookViewHolder holder, int position) {
    Recipe recipe = recipes.get(position);
    holder.bind(recipe, cookbookFragment);
  }

  /**
   * @return the number of Recipes retrieved from the database
   */
  @Override
  public int getItemCount() {
    return recipes.size();
  }

  /**
   * The ViewHolder class attaches Recipe fields and OnClickListeners to UI components.
   */
  static class CookbookViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {

    private final ItemCookbookListBinding binding;

    /**
     * The ViewHolder constructor attaches a {@link View} to each binding to support an
     * onClickListener.
     *
     * @param binding is the connection between the data and the interface.
     */
    public CookbookViewHolder(ItemCookbookListBinding binding) {
      super(binding.getRoot());
      this.binding = binding;
      binding.recipeTitle.setOnClickListener(this);
      binding.recipeFavorite.setOnClickListener(this);
      binding.edit.setOnClickListener(this);

      binding.recipeTitle.setOnLongClickListener(v -> {
        v.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
        binding.getUiController().deleteRecipe(binding.getRecipe());
        return false;
      });
    }

    /**
     * This method attaches a specific {@link Recipe} to a specific entry in the {@link
     * CookbookFragment}.
     *
     * @param recipe is received from the database
     */
    public void bind(Recipe recipe, CookbookFragment cookbookFragment) {
      binding.setUiController(cookbookFragment);
      binding.setRecipe(recipe);
      binding.executePendingBindings();
    }

    /**
     * This override of onClick responds to user input by either toggling the Recipe's {@code
     * favorite} field or navigating to either EditingFragment or RecipeFragment, passing the Recipe
     * as an argument.
     *
     * @param v is the View component tapped by the user.
     */
    @Override
    public void onClick(View v) {
      switch (v.getId()) {
        case Constants.TITLE:
          CookbookFragmentDirections.CookRec action = CookbookFragmentDirections.cookRec();
          action.setRecipeId(binding.getRecipe().getRecipeId());
          Navigation.findNavController(v).navigate(action);
          break;
        case Constants.FAVORITE:
          binding.getRecipe().setFavorite(!binding.getRecipe().isFavorite());
          break;
        case Constants.EDIT:
          CookbookFragmentDirections.CookEdit toEdit = CookbookFragmentDirections.cookEdit();
          toEdit.setRecipeId(binding.getRecipe().getRecipeId());
          Navigation.findNavController(v).navigate(toEdit);
          break;
        default:
          break;
      }
    }
  }

}