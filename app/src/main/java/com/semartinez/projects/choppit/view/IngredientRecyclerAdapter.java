package com.semartinez.projects.choppit.view;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.RecyclerView.ViewHolder;
import com.semartinez.projects.choppit.BR;
import com.semartinez.projects.choppit.controller.ui.cookbook.RecipeFragment;
import com.semartinez.projects.choppit.controller.ui.editing.EditingFragment;
import com.semartinez.projects.choppit.databinding.ItemEditIngredientBinding;
import com.semartinez.projects.choppit.databinding.ItemRecipeIngredientBinding;
import com.semartinez.projects.choppit.model.entity.Ingredient;
import com.semartinez.projects.choppit.model.entity.Ingredient.Unit;
import com.semartinez.projects.choppit.model.entity.Recipe;
import java.util.ArrayList;
import java.util.List;

/**
 * Provides bindings for a list of Ingredients to be displayed in either the {@link EditingFragment}
 * or {@link RecipeFragment}.
 */
public class IngredientRecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

  private final Context context;
  private final EditingFragment editingController;
  private final RecipeFragment recipeController;
  private final boolean edit;
  private final List<Ingredient> ingredients = new ArrayList<>();

  /**
   * Handles Data Binding for a list of Ingredients passed by the active Fragment while displaying a
   * Recipe.
   *
   * @param context    the Context where the adapter operates
   * @param recipe     is received from the active Fragment.
   * @param uiFragment is the active Fragment when this Adapter is being used.
   */
  public IngredientRecyclerAdapter(Context context, Recipe recipe, Fragment uiFragment) {
    this.context = context;
    this.edit = uiFragment instanceof EditingFragment;
    this.editingController =
        uiFragment instanceof EditingFragment ? (EditingFragment) uiFragment : null;
    this.recipeController =
        uiFragment instanceof RecipeFragment ? (RecipeFragment) uiFragment : null;
    this.ingredients.addAll(recipe.getIngredients());
  }

  /**
   * @param parent   where the new ViewHolder will be added.
   * @param viewType is not used in this override.
   * @return a ViewHolder for each item to be displayed based on the active Fragment.
   */
  @NonNull
  @Override
  public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
    LayoutInflater layoutInflater = LayoutInflater.from(context);
    if (edit) {
      ItemEditIngredientBinding editIngredientBinding = ItemEditIngredientBinding
          .inflate(layoutInflater, parent, false);
      return new EditIngredientViewHolder(editIngredientBinding);
    } else {
      ItemRecipeIngredientBinding recipeIngredientBinding = ItemRecipeIngredientBinding
          .inflate(layoutInflater, parent, false);
      return new RecipeIngredientViewHolder(recipeIngredientBinding);
    }
  }

  /**
   * Attaches each Ingredient to a ViewHolder.
   *
   * @param viewHolder generated by {@link #onCreateViewHolder(ViewGroup, int)}
   * @param position   the position of the Ingredient being added.
   */
  @Override
  public void onBindViewHolder(@NonNull ViewHolder viewHolder, int position) {
    Ingredient ingredient = ingredients.get(position);
    if (edit) {
      ((EditIngredientViewHolder) viewHolder).bind(ingredient);
    } else {
      ((RecipeIngredientViewHolder) viewHolder).bind(ingredient);
    }
  }

  /**
   * @return the number of Ingredients.
   */
  @Override
  public int getItemCount() {
    return ingredients.size();
  }

  /**
   * Allows the user to add a new Ingredient.
   */
  public void addIngredient() {
    ingredients.add(
        new Ingredient(editingController.getRecipe().getRecipeId(), "1", Unit.OTHER, " ", " "));
    notifyItemInserted(ingredients.size()); // size()-1?
  }

  /**
   * Allows the user to delete a single Ingredient.
   *
   * @param position the adapter position of the Ingredient to be deleted.
   */
  public void deleteIngredient(int position) {
    Log.d("Adapter delete", "Position " + position);
    ingredients.remove(position);
    notifyItemRemoved(position);
  }

  /**
   * The ViewHolder class attaches Ingredient fields to UI components.  EditIngredientViewHolder *
   * presents user-editable Ingredients.
   */
  public class EditIngredientViewHolder extends RecyclerView.ViewHolder {

    private final ItemEditIngredientBinding binding;

    /**
     * The ViewHolder constructor attaches a {@link View} to each binding.
     *
     * @param binding is the connection between the data and the interface.
     */
    public EditIngredientViewHolder(ItemEditIngredientBinding binding) {
      super(binding.getRoot());
      this.binding = binding;
    }

    /**
     * This method attaches a specific {@link Ingredient} to a specific entry in the active Fragment
     * and attaches a reference to the EditingFragment to handle user input.
     *
     * @param ingredient the item to be bound.
     */
    public void bind(Ingredient ingredient) {
      binding.setVariable(com.semartinez.projects.choppit.BR.ingredient, ingredient);
      binding.setPosition(getAdapterPosition());
      binding.setUiController(editingController);
      binding.executePendingBindings();
    }

  }

  /**
   * The ViewHolder class attaches Ingredient fields to UI components.  RecipeIngredientViewHolder *
   * presents non-editable Ingredients.
   */
  public class RecipeIngredientViewHolder extends RecyclerView.ViewHolder {

    private final ItemRecipeIngredientBinding binding;

    /**
     * The ViewHolder constructor attaches a {@link View} to each binding.
     *
     * @param binding is the connection between the data and the interface.
     */
    public RecipeIngredientViewHolder(ItemRecipeIngredientBinding binding) {
      super(binding.getRoot());
      this.binding = binding;
    }

    /**
     * This method attaches a single {@link Ingredient} to a specific binding and attaches the
     * active Fragment to handle user input.
     *
     * @param ingredient the item to be bound.
     */
    public void bind(Ingredient ingredient) {
      binding.setVariable(BR.ingredient, ingredient);
      binding.setUiController(recipeController);
      binding.executePendingBindings();
    }

  }

}
